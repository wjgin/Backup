성연철 강사님  C언어 / 카톡 아이디 frogteam

----------------
Day 01

기타 사항
	- tiobe index에서 기업 생태계 확인 가능


수업 내용
	1. VS install 및 설정
	
	2. [도서] 스프링 부트와  AWS로 혼자 구현하는 웹 서비스  - 이동욱
		- + 블로그 "기억보단 기록을"
	
	3. 가장 좋은 학습법, 누군가를 가르쳐 보기
		- 차후 스터디

	4. VS 실행
		- C++ 빈프로젝트 템플릿 선택
		- 솔루션 탐색기 / 소스파일 생성 /  c++ 파일 선택 / 이름.c 로 생성
		- 옵션 / 환경 / 글꼴 및 색 / 고정폭 글꼴 사용(출력 내용의 열 확인)
		- 빌드에서 제외: 파일 우클릭 / 속성 / 일반 탭 / 빌드에서  제외("예")
		- 같은 솔루션 내에서 첫 번째 프로젝트가 선 활성화 -> 솔루션 속성에서 변경
		- 기본 템플릿 만들기

	5. 개념
		- Java, C는 컴파일러(Programming language(소스 코드) -> binary code)를 가지고 있는 컴파일 언어
		- 컴파일 결과 -> Debug폴더 / .exe  파일(이진 파일)
		- 솔루션 파일 (.sin) 실행 -> 솔루션 및 소스코드 확인
		- main()함수는 한 프로젝트에 하나만 사용 가능 (필요시 다른 모듈을 빌드에서 제외)
		- 서식지정자 : %d, %f...
		- ASCII code
		- 변수 타입의 범위를 넘어가면 오버플로우 or 언더플로우 발생

	6. jungol 가입해 놓기
		- 선택 제어문~ 문자열까지 풀이 추천(첫 2주 안에)

-----------------------------------------------------

Day 02

	1. 강의 내용(추가적인 부분)

		- input  입력장치를 이용한 사용자 입력값 받기 (scanf)
		- 실수 연산시 (정수, 정수 연산의 경우 실수 소숫점 제외) => 실수 계산시 하나 이상을 실수로 형변환 필요
		- 실수를 입력 받을 때 float과 double 의구조적 차이점(%f. %lf)
		- 버퍼를 이용한 입력 방식

		<왜  getchar()을 써야하나>
			- 사용자의 입력을 기다리는 동안 CPU가 다른 일을 하기 위해서 넘어감
			- scanf를 이용시 버퍼(stdin)에 모든 입력을 받고 한번에 출력해준다(효율성)
			- 버퍼에 남아있는 공백(\n) 제거
			- 버퍼는 출력문자의 서식에 따라서 자료를 출력(%d 숫자만 / 아닐시 넘어감, %c 문자를 가져감(공백도 문자 취급))
			-  scanf로 입력 값을 받으면 버퍼에는 입력 값 + '\n'을 가진다.
			- scanf(%c) 사용할때, 버퍼 안의 \n을 문자로 인식해 가져온다.
			- getchar()는 버퍼안에 한 문자를 뽑아  return해 공백을 가져오는 일을 사전에 막을 수 있음.
			- 다른 방법으로는 scanf(%s)을 이용할 수 있다.

		- C 언어는 플랫폼에 최적화된 프로그램을 만들 수 있지만, 해당 플랫폼에서만 동작한다는 단점이 있다.
		- Java는 Java가상머신이 설치되어 있다면 어디든지 동작 가능
		
		<Shift 연산자의 성능>
		- Shift 연산자의 성능이 단순 2의 멱승보다 뛰어나다(10배 이상)
		
		<디버깅>
		- 에러는 아니지만 예상 결과와 다른 결과를 '버그'라고 한다.
		
		<조건문>
		- 해당 케이스를 바로 찾아가기 때문에 상황에 따라 if 문 보다 효율적일 수도 있다.

-----------------------------------------------------
Day 03

	1. 강의내용
		- 순환문 / 이용한 여러개 입력 및 출력
		
		<함수>
			- 함수 디버그(한단계씩 실행 : 함수 안을 확인), (프로시저 실행: 함수의 return까지 실행)
			- 함수 선언과 정의, 호출		
			- main() 함수의 return 값이 0인 이유 : 시스템이 메인함수를 호출 / exit_code
			- C언어는 위에서 아래로 컴파일 => main()함수 위에 새로운 함수를 선언하거나 정의 해줘야한다.
		
		- 헤더 파일 생성

		<배열>
			- 생성 및 사이즈, 길이 확인법
	2. 추가 공지
		- 출석 감독제(모니터링 시행) / 전면 비대면 기간 중
		- 감독관의 불시 출석 / 랜덤 개별 호명

-----------------------------------------------------

Day 04

	1. 강의내용
		<배열>
			- str 배열 선언 (null 문자의 중요성)
			- 다차원(n-dimension) 배열 선언

		<포인터>
			- 메모리 주소
			- & 주소 확인(출력)
			- 16진수(%x, %X, %p)가 일반적  %p는 16진수 8자리를 표기
			- 컴파일시 (x64) 사용시 8byte 체계를 이용함 (int 가 8바이트)
			- 포인터는 주소를 변수로 저장, 같은 메모리를 같은 것은 x
			- 건드려서는 안되는 주소를 가지기에 포인터에 직접적 주소를 대입x
			- 포인터 타입의 연산은 포인터의 타입에 따라서 다름
			
			<포인터 / 배열>
			 - 배열이름은 곧 배열의 '주소' 다.  포인터와 같이(처럼) 동작한다
			 - 타입은?  int* 타입
			 - arr[1]의 주소는 arr[0]보다 4크다(int 타입)
			 - c언어는 내부적으로 배열첨자를 포인터로 받는다.
			 - 실제 포인터는 아니기에 차이점을 갖는다.
			- 함수에서 배열을 인자로 받을 때, 포인터 함수로 받아야한다. ex): function(int *p) {...}
			
			<포인터 / 문자열>
			- 포인터로 문자열을 직접 입력시 리터럴 상수이다 => 값 변경 불가능
			- 문자열 함수(길이, 크기 비교, 문자열 복사, 문자열 붙이기
	2. 추가 공지





