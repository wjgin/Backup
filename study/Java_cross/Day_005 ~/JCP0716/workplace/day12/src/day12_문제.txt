
1. 인터페이스에 대한 설명으로 틀린 것들을 찾으세요. => 4, 5

1) 인터페이스는 객체 사용방법을 정의한 타입이다.	-> O
2) 다형성을 구현하는데 있어 매우 중요하다. -> O
3) 개발코드의 수정 없이 사용하는 객체를 변경할 수 있다. -> O / 상속보다 유연한 방법
4) 인터페이스가 갖는 필드의 값은 객체를 생성하여 접근한다. -> X / 인터페이스가 갖는 필드는 상수만(인터페이스 이름으로 접근)
5) 구현 클래스는 하나의 인터페이스만을 사용할 수 있다. -> X / 여러 인터페이스를 사용 가능
6) 인터페이스에 new 연산을 사용할 때에는 익명 구현 클래스의 객체가 된다. -> O

2. 인터페이스의 메소드에 대한 설명으로 틀린 것들을 찾으세요. => 1, 2, 4, 6
1) 추상메소드는 abstract 키워드를 반드시 필요로 한다. -> X / abtract 키워드는 생략한다.
2) 디폴트 메소드는 접근한정자를 생략하며 default 접근권한을 갖는다. -> X / 디폴트 메소드는 인스턴스 메소드, 생략하면 abtract이 된다.
3) 정적(static) 메소드를 가질수 있는데 인터페이스로만 호출한다. -> O
4) 구현 클래스에서 추상메소드의 접근 권한을 private 로 변경할 수 있다. -> X / 접근 권한을 변경할 수 없다.
5) 구현 클래스에서 추상메소드를 구현하지 않는다면 추상클래스가 된다. => O / abstract를 붙여 추상 클래스로 사용 가능
   즉, abstract 키워드로 추상클래스로 만든다.
6) 디폴트 메소드는 구현 클래스에서 오버라이딩 할수 없다. -> X / 오버라이딩 가능하다.


3. 인터페이스와 다형성 구현에 대한 설명으로 틀린 것을 찾으세요. => 2, 3, 5

1) 사용 방법이 동일한 구현 클래스를 만들어 참조 객체를 더 쉽게 변경할 수 있다. -> O / 인터페이스의 추상 메소드
2) 인터페이스 타입으로 변수를 선언하여 구현 객체를 참조할 때 명시적(강제) 형변환이 필요하다. -> X / 가능은 함. 인터페이스 타입 ↔ 구현 클래스 타입 변경해서 사용 (수평적 구조)
3) 클래스의 필드 타입을 인터페이스 타입으로 할 수 없다. -> X / 가능함, 필드, 배열 모두 가능
4) 인터페이스 타입으로 배열을 사용하여 다형성을 구현할 수 있다. -> O
5) 메소드의 매개변수를 인터페이스 타입으로 할수 없으므로 다형성 구현에 제약이 있다. -> X
6) 인터페이스 타입 변수를 구현 클래스 타입으로 강제 형변환 하여 구현 클래스에서 선언된
   필드와 메소드를 사용한다. -> O


4. Soundable 인터페이스를 구현한 Animal 클래스를 Dog 클래스가 상속 받는 것이 가능할까요?

=> 가능
클래스의 상속과 비교했을 때, 인터페이스는 다형성 구현 활용에 더 많이 사용된다.